#!/usr/bin/env python3
# Generates the top-level include/casemate.h

import pathlib
import subprocess

HERE = pathlib.Path(__file__).parent
ROOT = HERE.parent
CM_ROOT = ROOT.parent.parent

INCLUDE = ROOT / 'include'

compile_commands = []

template = (INCLUDE / "casemate-in" / "casemate.out.h").read_text()
helpers = (INCLUDE / "casemate-in" / "casemate-helpers.in.h").read_text()
transitions = (INCLUDE / "casemate-in" / "casemate-transitions.in.h").read_text()
config = (INCLUDE / "casemate-in" / "casemate-config.in.h").read_text()
version = (
    subprocess.run(["./tools/print_version.py"], cwd=CM_ROOT, capture_output=True, text=True).stdout.strip()
)

def make_header(template):
  return (
    "/* autogenerated file, do not edit */\n" +
    "/* clang-format off */\n" +
    (
      template
      .replace(
          "CASEMATE_TRANSITIONS_H",
          transitions,
      ).replace(
          "CASEMATE_STEP_HELPERS_H",
          helpers
      ).replace(
          "CASEMATE_CONFIG_H",
          config
      ).replace(
          "CASEMATE_VERSION_H",
          version
      )
    )
  )

with open(INCLUDE / "casemate.h", "w") as f:
  f.write(make_header(template))
